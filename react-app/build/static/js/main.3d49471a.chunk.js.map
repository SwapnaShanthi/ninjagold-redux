{"version":3,"sources":["logo.svg","redux.js","components/NinjaGoldCount.js","components/NinjaGoldPlayerArena.js","components/NinjaGoldActionTracker.js","components/NinjaGoldMain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","loadDetails","payload","type","updateNinjaDetails","ninjaReducer","state","arguments","length","undefined","initialState","action","console","log","Object","assign","ninjaActionTrackerList","ninjaactions","goldCount","goldcount","count","concat","toConsumableArray","store","createStore","configureStore","NinjaGoldCount","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","Component","connect","dispatch","NinjaGoldPlayerArena","handleNinjaActivity","min","max","Math","floor","random","textMessage","abs","tempninjaActionTrackerList","Array","from","push","objectToUpdate","id","updateServer","axios","post","then","response","retriveNinjaDetails","setState","error","catch","_this2","onClick","NinjaGoldActionTracker","displayNinjaActionTracker","map","item","index","NinjaGoldMain","get","data","displayError","components_NinjaGoldCount","components_NinjaGoldPlayerArena","components_NinjaGoldActionTracker","App","components_NinjaGoldMain","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gSCK3BC,SAAc,SAACC,GAAD,MAAc,CACrCC,KAAM,cACND,aAESE,EAAqB,SAACF,GAAD,MAAc,CAC5CC,KAAM,SACND,YAISG,EAAa,WAA+B,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBG,EAAcC,EAASJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAErD,OADAG,QAAQC,IAAI,gBAAgBP,EAAMK,EAAOR,MACjCQ,EAAOR,MAEb,IAAK,cACC,OAAOW,OAAOC,OAAO,GACDT,EACA,CAACU,uBAAuBL,EAAOT,QAAQe,aAAaC,UAAUP,EAAOT,QAAQiB,YACvG,IAAK,SACC,IAAIC,EAAMT,EAAOT,QAAQiB,UAAUb,EAAMY,UACxC,OAAOJ,OAAOC,OAAO,GACAT,EACA,CAACU,uBAAsB,GAAAK,OAAAP,OAAAQ,EAAA,EAAAR,CAAKR,EAAMU,wBAAX,CAAkCL,EAAOT,QAAQe,eAAcC,UAAUE,IAG3H,QACM,OAAOd,IAMdI,EAAe,CACjBM,uBAAwB,GACxBE,UAAU,GAQP,IAAMK,EALN,WAAqD,IAA7Bb,EAA6BH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAdG,EAE1C,OADcc,YAAYnB,EAAaK,GAItBe,0BCxCfC,qBACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAJ,IACjBE,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAY,GAAAO,KAAAH,KAAMH,KACDrB,MAAM,GAFMsB,wEAQjB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAAf,oBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,cAA0CP,KAAKH,MAAMT,mBAZpCoB,cA4BZC,cAVS,SAACjC,GAAD,MAAY,CAClCU,uBAAuBV,EAAMU,uBAC7BE,UAAUZ,EAAMY,YAGS,SAACsB,GAAD,MAAe,CACxCvC,YAAa,SAACC,GAAD,OAAasC,EAASvC,EAAYC,KAC/CE,mBAAoB,SAACF,GAAD,OAAasC,EAASpC,EAAmBF,OAGhDqC,CAGbb,GC/BEe,qBACF,SAAAA,EAAYd,GAAO,IAAAC,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAW,IACjBb,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAA2B,GAAAR,KAAAH,KAAMH,KAIRe,oBAAoB,SAACC,EAAIC,EAAIzC,GAEzB,IAAIe,EAAU2B,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EACxDK,EAAY,iBACN,SAAP7C,EACA6C,EAAaA,EAAW,GAAA3B,OAAKH,GAAa,eAC7B,SAAPf,EACL6C,EAAaA,EAAW,GAAA3B,OAAIH,GAAa,eAC7B,WAAPf,EACFe,EAAU,IAAI,GACbA,IAAsB,EACtB8B,EAAa,kBAAA3B,OAAkBwB,KAAKI,IAAI/B,IAAc,kBAEtD8B,EAAaA,EAAW,GAAA3B,OAAIH,GAAa,iBAGjC,UAAPf,IACL6C,EAAaA,EAAW,GAAA3B,OAAIH,GAAa,iBAE7C,IAAIgC,EAA6BC,MAAMC,KAAKxB,EAAKD,MAAMX,wBACvDkC,EAA2BG,KAAKL,GAChC,IAAIM,EAAe,CAACC,GAAG,EACHtC,aAAaiC,EACb/B,UAAUS,EAAKD,MAAMT,UAAUA,GAGnDU,EAAK4B,aAAaF,IA/BH1B,EAkCnB4B,aAAa,SAACF,GAEVG,IAAMC,KAAN,4CAAuD,CAACJ,mBAClDK,KAAK,SAACC,GACJhC,EAAKD,MAAMkC,sBACXjC,EAAKkC,SAAS,CAACC,MAAM,OAEvBC,MAAM,SAACD,GACHnC,EAAKkC,SAAS,CAACC,MAAM,gCAxCjCnC,EAAKtB,MAAM,GAFMsB,wEA+CV,IAAAqC,EAAAnC,KAEP,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCAAf,uBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,oBACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,WAAKD,EAAKvB,oBAAoB,EAAE,EAAE,SAAUL,UAAU,kBAAkBlC,KAAK,UAA9F,UAET+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,qBACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAS8B,QAAS,WAAKD,EAAKvB,oBAAoB,EAAE,GAAG,SAAUL,UAAU,kBAAkBlC,KAAK,UAAhG,UAET+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,sCACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,WAAKD,EAAKvB,oBAAoB,EAAE,IAAI,WAAYL,UAAU,oBAAoBlC,KAAK,UAApG,YAET+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,qBACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,WAAKD,EAAKvB,oBAAoB,EAAE,GAAG,UAAWL,UAAU,mBAAmBlC,KAAK,UAAjG,oBAxEUmC,cA0FlBC,cAVS,SAACjC,GAAD,MAAY,CAClCU,uBAAuBV,EAAMU,uBAC7BE,UAAUZ,EAAMY,YAGS,SAACsB,GAAD,MAAe,CACxCvC,YAAa,SAACC,GAAD,OAAasC,EAASvC,EAAYC,KAC/CE,mBAAoB,SAACF,GAAD,OAAasC,EAASpC,EAAmBF,OAGhDqC,CAGbE,GC7FE0B,qBACF,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAqC,IACjBvC,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAqD,GAAAlC,KAAAH,KAAMH,KACDrB,MAAM,GAFMsB,wEAMjB,IAAMwC,EAA0BtC,KAAKH,MAAMX,uBAAuBqD,IAAI,SAACC,EAAKC,GACvE,OAAOrC,EAAAC,EAAAC,cAAA,UAAKkC,KAIjB,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAAf,6BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UACKgC,aAlBgB9B,cAqCpBC,cAXS,SAACjC,GAAD,MAAY,CAClCU,uBAAuBV,EAAMU,uBAC7BE,UAAUZ,EAAMY,YAGS,SAACsB,GAAD,MAAe,CACxCvC,YAAa,SAACC,GAAD,OAAasC,EAASvC,EAAYC,KAC/CE,mBAAoB,SAACF,GAAD,OAAasC,EAASpC,EAAmBF,OAIhDqC,CAGb4B,GCrCEK,qBACF,SAAAA,EAAY7C,GAAO,IAAAC,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAA0C,IACjB5C,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAA0D,GAAAvC,KAAAH,KAAMH,KAKRkC,oBAAoB,WAChBJ,IAAMgB,IAAN,8CACCd,KAAK,SAACC,GACHhD,QAAQC,IAAI,oBAAoB+C,EAASc,KAAKA,MAC/C9C,EAAKD,MAAM1B,YAAY2D,EAASc,KAAKA,KAAK,IAC1C9C,EAAKkC,SAAS,CAACC,MAAM,OAEvBC,MAAM,SAACD,GACLnC,EAAKkC,SAAS,CAACC,MAAM,gCAZ1BnC,EAAKtB,MAAM,CACCyD,MAAM,IAHDnC,mFAkBfE,KAAK+B,uDAEA,IAAAI,EAAAnC,KAQP,OACEI,EAAAC,EAAAC,cAAA,WAPe,WACd,GAAuB,KAApB6B,EAAK3D,MAAMyD,MACZ,OAAQ7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmB4B,EAAK3D,MAAMyD,OAMtDY,GACDzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,CAAsBhB,oBAAqB/B,KAAK+B,sBAChD3B,EAAAC,EAAAC,cAAC0C,EAAD,cAlCmBxC,cAkDXC,cAVS,SAACjC,GAAD,MAAY,CAClCU,uBAAuBV,EAAMU,uBAC7BE,UAAUZ,EAAMY,YAGS,SAACsB,GAAD,MAAe,CACxCvC,YAAa,SAACC,GAAD,OAAasC,EAASvC,EAAYC,KAC/CE,mBAAoB,SAACF,GAAD,OAAasC,EAASpC,EAAmBF,OAGhDqC,CAGbiC,GChDWO,mLARX,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAC4C,EAAD,cAJW1C,aCOE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAUjE,MAAOA,GACbW,EAAAC,EAAAC,cAACqD,EAAD,OACSC,SAASC,eAAe,SDuH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.3d49471a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {\n    createStore,\n} from 'redux';\nimport update from 'react-addons-update';\n\nexport const loadDetails = (payload) => ({\n    type: 'RETRIVE_ALL',   \n    payload                     // <-- action.type\n});\nexport const updateNinjaDetails = (payload) => ({\n    type: 'UPDATE',   \n    payload                     // <-- action.type\n});\n\n\nexport const ninjaReducer=(state =initialState, action)=>{\n    console.log(\"reducer state\",state,action.type);\n    switch (action.type) {\n        \n      case 'RETRIVE_ALL':\n            return Object.assign({},\n                                state,\n                                {ninjaActionTrackerList:action.payload.ninjaactions,goldCount:action.payload.goldcount})\n      case 'UPDATE':\n            let count=action.payload.goldcount+state.goldCount;\n             return Object.assign({},\n                                  state,\n                                  {ninjaActionTrackerList:[...state.ninjaActionTrackerList,action.payload.ninjaactions],goldCount:count})\n      \n      \n       default:\n             return state;\n    }\n}\n\n\n\nconst initialState = { \n    ninjaActionTrackerList: [],\n    goldCount:0             \n};\n\nexport function configureStore(initialState = initialState) { // initialState = initialState | {}\n    const store = createStore(ninjaReducer,initialState);\n    return store;\n};\n\nexport const store = configureStore();\n","import React, { Component } from \"react\";\nimport { loadDetails,updateNinjaDetails} from '../redux.js';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport './../style/ninjagoldcount.css';\n\nclass NinjaGoldCount extends Component {\n    constructor(props) {\n      super(props);\n      this.state={\n                }\n    }\n    render() {\n    \n\n      return (\n        <div className=\"ninjagoldcountouterdiv\">\n            <div className=\"ninjagoldcountheaderdiv\">Ninja Gold Count</div>\n            <div className=\"counterstyle\">Gold Count:{this.props.goldCount}</div>\n        </div>\n      );\n    }\n  }\n  \n  const mapStateToProps = (state) => ({\n    ninjaActionTrackerList:state.ninjaActionTrackerList,\n    goldCount:state.goldCount\n  })\n  \n  const mapDispatchToProps = (dispatch) => ({\n    loadDetails: (payload) => dispatch(loadDetails(payload)),\n    updateNinjaDetails: (payload) => dispatch(updateNinjaDetails(payload))\n  })\n  \n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(NinjaGoldCount);","import React, { Component } from \"react\";\nimport { loadDetails,updateNinjaDetails} from '../redux.js';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport './../style/ninjagoldplayerarena.css'\n\nclass NinjaGoldPlayerArena extends Component {\n    constructor(props) {\n      super(props);\n      this.state={\n                }\n    }\n    handleNinjaActivity=(min,max,type)=>{\n\n        let goldCount=Math.floor(Math.random() * (max - min + 1)) + min;\n        let textMessage=\"You've earned \"\n        if(type===\"Farm\"){\n           textMessage= textMessage +`${goldCount}`+ \" at the Farm\";\n        }else if(type===\"Cave\"){\n            textMessage= textMessage+`${goldCount}`+ \" at the Cave\";\n        }else if(type===\"Casino\"){\n            if(goldCount%2===0){\n                goldCount=goldCount*(-1);\n                textMessage= \"You've lost \"+`${Math.abs(goldCount)}`+ \" at the Casino\";\n            }else{\n                textMessage= textMessage+`${goldCount}`+ \" at the Casino\";\n            }\n            \n        }else if(type===\"House\"){\n            textMessage= textMessage+`${goldCount}`+ \" at the House\";\n        }\n        let tempninjaActionTrackerList = Array.from(this.props.ninjaActionTrackerList);\n        tempninjaActionTrackerList.push(textMessage);\n        let objectToUpdate={id:1,\n                            ninjaactions:tempninjaActionTrackerList,\n                            goldcount:this.props.goldCount+goldCount\n\n                           }\n        this.updateServer(objectToUpdate);\n        \n    }\n    updateServer=(objectToUpdate)=>{\n       \n        axios.post(`http://localhost:5000/updateninjadetails/`,{objectToUpdate})\n             .then((response) => {\n                this.props.retriveNinjaDetails();\n                this.setState({error:\"\"});\n             })\n             .catch((error) => {\n                  this.setState({error:\"Server connection failed\"});\n              });   \n\n    }\n  \n    render() {\n\n      return (\n        <div className=\"ninjagoldplayerarenaouterdiv\" >\n            <div className=\"ninjagoldplayerarenaheaderdiv\">Ninja Players Arena</div>\n            <div className=\"playerarenadiv\">\n                <div className=\"playerarenainnerdiv\">\n                    <div className=\"header\">Farm</div>\n                    <div className=\"descriptiondiv\">Earns 2 - 5 Gold</div>\n                    <div><button onClick={()=>{this.handleNinjaActivity(2,5,\"Farm\")}} className=\"buttonstylefarm\" type=\"button\" >Farm</button></div>\n                </div>\n                <div className=\"playerarenainnerdiv\">\n                    <div className=\"header\">Cave</div>\n                    <div className=\"descriptiondiv\">Earns 5 - 10 Gold</div>\n                    <div><button  onClick={()=>{this.handleNinjaActivity(5,10,\"Cave\")}} className=\"buttonstylecave\" type=\"button\" >Cave</button></div>\n                </div>\n                <div className=\"playerarenainnerdiv\">\n                    <div className=\"header\">Casino</div>\n                    <div className=\"descriptiondiv\">Earn up to or loose up to 100 Gold</div>\n                    <div><button onClick={()=>{this.handleNinjaActivity(0,100,\"Casino\")}} className=\"buttonstylecasino\" type=\"button\" >Casino</button></div>\n                </div>\n                <div className=\"playerarenainnerdiv\">\n                    <div className=\"header\">House</div>\n                    <div className=\"descriptiondiv\">Earns 7 - 15 Gold</div>\n                    <div><button onClick={()=>{this.handleNinjaActivity(7,15,\"House\")}} className=\"buttonstylehouse\" type=\"button\" >House</button></div>\n                </div>\n            </div>\n          \n        </div>\n      );\n    }\n  }\n  const mapStateToProps = (state) => ({\n    ninjaActionTrackerList:state.ninjaActionTrackerList,\n    goldCount:state.goldCount\n  })\n  \n  const mapDispatchToProps = (dispatch) => ({\n    loadDetails: (payload) => dispatch(loadDetails(payload)),\n    updateNinjaDetails: (payload) => dispatch(updateNinjaDetails(payload))\n  })\n  \n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(NinjaGoldPlayerArena);","import React, { Component } from \"react\";\nimport { loadDetails,updateNinjaDetails} from '../redux.js';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport './../style/ninjagoldactiontracker.css';\n\nclass NinjaGoldActionTracker extends Component {\n    constructor(props) {\n      super(props);\n      this.state={\n                }\n    }\n    render() {\n      const displayNinjaActionTracker=this.props.ninjaActionTrackerList.map((item,index)=>{\n           return <li>{item}</li>\n\n      })\n\n      return (\n        <div >\n          <div className=\"ninjagoldactiontrackerouterdiv\">\n            <div className=\"ninjagoldactiontrackerheaderdiv\">Ninja Gold Action Tracker</div>\n            <div className=\"listdiv\">\n                <ul>\n                    {displayNinjaActionTracker}\n                </ul>\n            </div>\n        </div>\n      </div>\n      );\n    }\n  }\n  const mapStateToProps = (state) => ({\n    ninjaActionTrackerList:state.ninjaActionTrackerList,\n    goldCount:state.goldCount\n  })\n  \n  const mapDispatchToProps = (dispatch) => ({\n    loadDetails: (payload) => dispatch(loadDetails(payload)),\n    updateNinjaDetails: (payload) => dispatch(updateNinjaDetails(payload))\n    \n  })\n  \n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(NinjaGoldActionTracker);","import React, { Component } from \"react\";\nimport { loadDetails,updateNinjaDetails} from '../redux.js';\nimport { connect } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport NinjaGoldCount from \"./NinjaGoldCount.js\";\nimport NinjaGoldPlayerArena from \"./NinjaGoldPlayerArena.js\";\nimport NinjaGoldActionTracker from \"./NinjaGoldActionTracker.js\";\nimport './../style/ninjamain.css'\n\nclass NinjaGoldMain extends Component {\n    constructor(props) {\n      super(props);\n      this.state={\n                  error:\"\"\n                }\n    }\n    retriveNinjaDetails=()=>{\n        axios.get(`http://localhost:5000/getninjagolddetails/`)\n        .then((response )=> {\n            console.log(\"the ninja details\",response.data.data);\n           this.props.loadDetails(response.data.data[0]);\n           this.setState({error:\"\"});\n        })\n        .catch((error) => {\n           this.setState({error:\"Server connection failed\"});\n        });\n    }\n    componentDidMount(){\n        this.retriveNinjaDetails();\n    }\n    render() {\n\n    const displayError=()=>{\n         if(this.state.error!== \"\"){\n           return  <div className=\"errormessagediv\">{this.state.error}</div>\n         }\n     } \n\n      return (\n        <div >\n         {displayError()}   \n         <NinjaGoldCount/>\n         <NinjaGoldPlayerArena retriveNinjaDetails={this.retriveNinjaDetails}/>\n         <NinjaGoldActionTracker/>\n      </div>\n      );\n    }\n  }\n  \n  const mapStateToProps = (state) => ({\n    ninjaActionTrackerList:state.ninjaActionTrackerList,\n    goldCount:state.goldCount\n  })\n  \n  const mapDispatchToProps = (dispatch) => ({\n    loadDetails: (payload) => dispatch(loadDetails(payload)),\n    updateNinjaDetails: (payload) => dispatch(updateNinjaDetails(payload))\n  })\n  \n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(NinjaGoldMain);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NinjaGoldMain from './components/NinjaGoldMain';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <NinjaGoldMain/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux';\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}